// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.220110.5

#pragma once
#ifndef WINRT_AdjustSdk_H
#define WINRT_AdjustSdk_H
#include "winrt/base.h"
static_assert(winrt::check_version(CPPWINRT_VERSION, "2.0.220110.5"), "Mismatched C++/WinRT headers.");
#define CPPWINRT_VERSION "2.0.220110.5"
#include "winrt/impl/Windows.Foundation.2.h"
#include "winrt/impl/Windows.Foundation.Collections.2.h"
#include "winrt/impl/AdjustSdk.2.h"
namespace winrt::impl
{
    template <typename D> WINRT_IMPL_AUTO(void) consume_AdjustSdk_IAdjustAttributionClass<D>::TrackerToken(param::hstring const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustAttributionClass)->put_TrackerToken(*(void**)(&value)));
    }
    template <typename D> WINRT_IMPL_AUTO(hstring) consume_AdjustSdk_IAdjustAttributionClass<D>::TrackerToken() const
    {
        void* winrt_impl_result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustAttributionClass)->get_TrackerToken(&winrt_impl_result));
        return hstring{ winrt_impl_result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_AdjustSdk_IAdjustAttributionClass<D>::TrackerName(param::hstring const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustAttributionClass)->put_TrackerName(*(void**)(&value)));
    }
    template <typename D> WINRT_IMPL_AUTO(hstring) consume_AdjustSdk_IAdjustAttributionClass<D>::TrackerName() const
    {
        void* winrt_impl_result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustAttributionClass)->get_TrackerName(&winrt_impl_result));
        return hstring{ winrt_impl_result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_AdjustSdk_IAdjustAttributionClass<D>::Network(param::hstring const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustAttributionClass)->put_Network(*(void**)(&value)));
    }
    template <typename D> WINRT_IMPL_AUTO(hstring) consume_AdjustSdk_IAdjustAttributionClass<D>::Network() const
    {
        void* winrt_impl_result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustAttributionClass)->get_Network(&winrt_impl_result));
        return hstring{ winrt_impl_result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_AdjustSdk_IAdjustAttributionClass<D>::Campaign(param::hstring const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustAttributionClass)->put_Campaign(*(void**)(&value)));
    }
    template <typename D> WINRT_IMPL_AUTO(hstring) consume_AdjustSdk_IAdjustAttributionClass<D>::Campaign() const
    {
        void* winrt_impl_result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustAttributionClass)->get_Campaign(&winrt_impl_result));
        return hstring{ winrt_impl_result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_AdjustSdk_IAdjustAttributionClass<D>::Adgroup(param::hstring const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustAttributionClass)->put_Adgroup(*(void**)(&value)));
    }
    template <typename D> WINRT_IMPL_AUTO(hstring) consume_AdjustSdk_IAdjustAttributionClass<D>::Adgroup() const
    {
        void* winrt_impl_result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustAttributionClass)->get_Adgroup(&winrt_impl_result));
        return hstring{ winrt_impl_result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_AdjustSdk_IAdjustAttributionClass<D>::Creative(param::hstring const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustAttributionClass)->put_Creative(*(void**)(&value)));
    }
    template <typename D> WINRT_IMPL_AUTO(hstring) consume_AdjustSdk_IAdjustAttributionClass<D>::Creative() const
    {
        void* winrt_impl_result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustAttributionClass)->get_Creative(&winrt_impl_result));
        return hstring{ winrt_impl_result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_AdjustSdk_IAdjustAttributionClass<D>::ClickLabel(param::hstring const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustAttributionClass)->put_ClickLabel(*(void**)(&value)));
    }
    template <typename D> WINRT_IMPL_AUTO(hstring) consume_AdjustSdk_IAdjustAttributionClass<D>::ClickLabel() const
    {
        void* winrt_impl_result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustAttributionClass)->get_ClickLabel(&winrt_impl_result));
        return hstring{ winrt_impl_result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_AdjustSdk_IAdjustAttributionClass<D>::Adid(param::hstring const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustAttributionClass)->put_Adid(*(void**)(&value)));
    }
    template <typename D> WINRT_IMPL_AUTO(hstring) consume_AdjustSdk_IAdjustAttributionClass<D>::Adid() const
    {
        void* winrt_impl_result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustAttributionClass)->get_Adid(&winrt_impl_result));
        return hstring{ winrt_impl_result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(bool) consume_AdjustSdk_IAdjustAttributionClass<D>::Equals(winrt::Windows::Foundation::IInspectable const& obj) const
    {
        bool winrt_impl_result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustAttributionClass)->Equals(*(void**)(&obj), &winrt_impl_result));
        return winrt_impl_result;
    }
    template <typename D> WINRT_IMPL_AUTO(int32_t) consume_AdjustSdk_IAdjustAttributionClass<D>::GetHashCode() const
    {
        int32_t winrt_impl_result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustAttributionClass)->GetHashCode(&winrt_impl_result));
        return winrt_impl_result;
    }
    template <typename D> WINRT_IMPL_AUTO(hstring) consume_AdjustSdk_IAdjustAttributionClass<D>::ToString() const
    {
        void* winrt_impl_result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustAttributionClass)->ToString(&winrt_impl_result));
        return hstring{ winrt_impl_result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::AdjustSdk::AdjustAttribution) consume_AdjustSdk_IAdjustAttributionStatic<D>::FromJsonString(param::hstring const& attributionString, param::hstring const& adid) const
    {
        void* winrt_impl_result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustAttributionStatic)->FromJsonString(*(void**)(&attributionString), *(void**)(&adid), &winrt_impl_result));
        return winrt::AdjustSdk::AdjustAttribution{ winrt_impl_result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::Foundation::Collections::IMapView<hstring, winrt::Windows::Foundation::IInspectable>) consume_AdjustSdk_IAdjustAttributionStatic<D>::ToDictionary(winrt::AdjustSdk::AdjustAttribution const& attribution) const
    {
        void* winrt_impl_result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustAttributionStatic)->ToDictionary(*(void**)(&attribution), &winrt_impl_result));
        return winrt::Windows::Foundation::Collections::IMapView<hstring, winrt::Windows::Foundation::IInspectable>{ winrt_impl_result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::AdjustSdk::AdjustAttribution) consume_AdjustSdk_IAdjustAttributionStatic<D>::FromDictionary(param::map_view<hstring, winrt::Windows::Foundation::IInspectable> const& attributionObjectMap) const
    {
        void* winrt_impl_result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustAttributionStatic)->FromDictionary(*(void**)(&attributionObjectMap), &winrt_impl_result));
        return winrt::AdjustSdk::AdjustAttribution{ winrt_impl_result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_AdjustSdk_IAdjustConfigClass<D>::SdkPrefix(param::hstring const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustConfigClass)->put_SdkPrefix(*(void**)(&value)));
    }
    template <typename D> WINRT_IMPL_AUTO(hstring) consume_AdjustSdk_IAdjustConfigClass<D>::SdkPrefix() const
    {
        void* winrt_impl_result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustConfigClass)->get_SdkPrefix(&winrt_impl_result));
        return hstring{ winrt_impl_result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_AdjustSdk_IAdjustConfigClass<D>::EventBufferingEnabled(bool value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustConfigClass)->put_EventBufferingEnabled(value));
    }
    template <typename D> WINRT_IMPL_AUTO(bool) consume_AdjustSdk_IAdjustConfigClass<D>::EventBufferingEnabled() const
    {
        bool winrt_impl_result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustConfigClass)->get_EventBufferingEnabled(&winrt_impl_result));
        return winrt_impl_result;
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_AdjustSdk_IAdjustConfigClass<D>::DefaultTracker(param::hstring const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustConfigClass)->put_DefaultTracker(*(void**)(&value)));
    }
    template <typename D> WINRT_IMPL_AUTO(hstring) consume_AdjustSdk_IAdjustConfigClass<D>::DefaultTracker() const
    {
        void* winrt_impl_result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustConfigClass)->get_DefaultTracker(&winrt_impl_result));
        return hstring{ winrt_impl_result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_AdjustSdk_IAdjustConfigClass<D>::SendInBackground(bool value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustConfigClass)->put_SendInBackground(value));
    }
    template <typename D> WINRT_IMPL_AUTO(bool) consume_AdjustSdk_IAdjustConfigClass<D>::SendInBackground() const
    {
        bool winrt_impl_result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustConfigClass)->get_SendInBackground(&winrt_impl_result));
        return winrt_impl_result;
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_AdjustSdk_IAdjustConfigClass<D>::DelayStart(winrt::Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustConfigClass)->put_DelayStart(*(void**)(&value)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan>) consume_AdjustSdk_IAdjustConfigClass<D>::DelayStart() const
    {
        void* winrt_impl_result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustConfigClass)->get_DelayStart(&winrt_impl_result));
        return winrt::Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan>{ winrt_impl_result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_AdjustSdk_IAdjustConfigClass<D>::AttributionChanged(winrt::Windows::Foundation::EventHandler<winrt::AdjustSdk::AdjustAttribution> const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustConfigClass)->put_AttributionChanged(*(void**)(&value)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::Foundation::EventHandler<winrt::AdjustSdk::AdjustAttribution>) consume_AdjustSdk_IAdjustConfigClass<D>::AttributionChanged() const
    {
        void* winrt_impl_result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustConfigClass)->get_AttributionChanged(&winrt_impl_result));
        return winrt::Windows::Foundation::EventHandler<winrt::AdjustSdk::AdjustAttribution>{ winrt_impl_result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_AdjustSdk_IAdjustConfigClass<D>::SetUserAgent(param::hstring const& userAgent) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustConfigClass)->SetUserAgent(*(void**)(&userAgent)));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_AdjustSdk_IAdjustConfigClass<D>::SetDeviceKnown(bool deviceKnown) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustConfigClass)->SetDeviceKnown(deviceKnown));
    }
    template <typename D> WINRT_IMPL_AUTO(bool) consume_AdjustSdk_IAdjustConfigClass<D>::IsValid() const
    {
        bool winrt_impl_result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustConfigClass)->IsValid(&winrt_impl_result));
        return winrt_impl_result;
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_AdjustSdk_IAdjustConfigClass<D>::SetAppSecret(int64_t secretId, int64_t info1, int64_t info2, int64_t info3, int64_t info4) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustConfigClass)->SetAppSecret(secretId, info1, info2, info3, info4));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::AdjustSdk::AdjustConfig) consume_AdjustSdk_IAdjustConfigFactory<D>::CreateAdjustConfig(param::hstring const& appToken, param::hstring const& environment, winrt::Windows::Foundation::IReference<winrt::AdjustSdk::LogLevel> const& logLevel) const
    {
        void* winrt_impl_result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustConfigFactory)->CreateAdjustConfig(*(void**)(&appToken), *(void**)(&environment), *(void**)(&logLevel), &winrt_impl_result));
        return winrt::AdjustSdk::AdjustConfig{ winrt_impl_result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_AdjustSdk_IAdjustEventClass<D>::PurchaseId(param::hstring const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustEventClass)->put_PurchaseId(*(void**)(&value)));
    }
    template <typename D> WINRT_IMPL_AUTO(hstring) consume_AdjustSdk_IAdjustEventClass<D>::PurchaseId() const
    {
        void* winrt_impl_result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustEventClass)->get_PurchaseId(&winrt_impl_result));
        return hstring{ winrt_impl_result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_AdjustSdk_IAdjustEventClass<D>::CallbackId(param::hstring const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustEventClass)->put_CallbackId(*(void**)(&value)));
    }
    template <typename D> WINRT_IMPL_AUTO(hstring) consume_AdjustSdk_IAdjustEventClass<D>::CallbackId() const
    {
        void* winrt_impl_result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustEventClass)->get_CallbackId(&winrt_impl_result));
        return hstring{ winrt_impl_result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_AdjustSdk_IAdjustEventClass<D>::SetRevenue(double revenue, param::hstring const& currency) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustEventClass)->SetRevenue(revenue, *(void**)(&currency)));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_AdjustSdk_IAdjustEventClass<D>::AddCallbackParameter(param::hstring const& key, param::hstring const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustEventClass)->AddCallbackParameter(*(void**)(&key), *(void**)(&value)));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_AdjustSdk_IAdjustEventClass<D>::AddPartnerParameter(param::hstring const& key, param::hstring const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustEventClass)->AddPartnerParameter(*(void**)(&key), *(void**)(&value)));
    }
    template <typename D> WINRT_IMPL_AUTO(bool) consume_AdjustSdk_IAdjustEventClass<D>::IsValid() const
    {
        bool winrt_impl_result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustEventClass)->IsValid(&winrt_impl_result));
        return winrt_impl_result;
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::AdjustSdk::AdjustEvent) consume_AdjustSdk_IAdjustEventFactory<D>::CreateAdjustEvent(param::hstring const& eventToken) const
    {
        void* winrt_impl_result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustEventFactory)->CreateAdjustEvent(*(void**)(&eventToken), &winrt_impl_result));
        return winrt::AdjustSdk::AdjustEvent{ winrt_impl_result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_AdjustSdk_IAdjustEventFailureClass<D>::Message(param::hstring const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustEventFailureClass)->put_Message(*(void**)(&value)));
    }
    template <typename D> WINRT_IMPL_AUTO(hstring) consume_AdjustSdk_IAdjustEventFailureClass<D>::Message() const
    {
        void* winrt_impl_result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustEventFailureClass)->get_Message(&winrt_impl_result));
        return hstring{ winrt_impl_result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_AdjustSdk_IAdjustEventFailureClass<D>::Timestamp(param::hstring const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustEventFailureClass)->put_Timestamp(*(void**)(&value)));
    }
    template <typename D> WINRT_IMPL_AUTO(hstring) consume_AdjustSdk_IAdjustEventFailureClass<D>::Timestamp() const
    {
        void* winrt_impl_result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustEventFailureClass)->get_Timestamp(&winrt_impl_result));
        return hstring{ winrt_impl_result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_AdjustSdk_IAdjustEventFailureClass<D>::Adid(param::hstring const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustEventFailureClass)->put_Adid(*(void**)(&value)));
    }
    template <typename D> WINRT_IMPL_AUTO(hstring) consume_AdjustSdk_IAdjustEventFailureClass<D>::Adid() const
    {
        void* winrt_impl_result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustEventFailureClass)->get_Adid(&winrt_impl_result));
        return hstring{ winrt_impl_result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_AdjustSdk_IAdjustEventFailureClass<D>::EventToken(param::hstring const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustEventFailureClass)->put_EventToken(*(void**)(&value)));
    }
    template <typename D> WINRT_IMPL_AUTO(hstring) consume_AdjustSdk_IAdjustEventFailureClass<D>::EventToken() const
    {
        void* winrt_impl_result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustEventFailureClass)->get_EventToken(&winrt_impl_result));
        return hstring{ winrt_impl_result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_AdjustSdk_IAdjustEventFailureClass<D>::WillRetry(bool value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustEventFailureClass)->put_WillRetry(value));
    }
    template <typename D> WINRT_IMPL_AUTO(bool) consume_AdjustSdk_IAdjustEventFailureClass<D>::WillRetry() const
    {
        bool winrt_impl_result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustEventFailureClass)->get_WillRetry(&winrt_impl_result));
        return winrt_impl_result;
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_AdjustSdk_IAdjustEventFailureClass<D>::CallbackId(param::hstring const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustEventFailureClass)->put_CallbackId(*(void**)(&value)));
    }
    template <typename D> WINRT_IMPL_AUTO(hstring) consume_AdjustSdk_IAdjustEventFailureClass<D>::CallbackId() const
    {
        void* winrt_impl_result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustEventFailureClass)->get_CallbackId(&winrt_impl_result));
        return hstring{ winrt_impl_result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_AdjustSdk_IAdjustEventFailureClass<D>::JsonResponse(param::async_map_view<hstring, hstring> const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustEventFailureClass)->put_JsonResponse(*(void**)(&value)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::Foundation::Collections::IMapView<hstring, hstring>) consume_AdjustSdk_IAdjustEventFailureClass<D>::JsonResponse() const
    {
        void* winrt_impl_result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustEventFailureClass)->get_JsonResponse(&winrt_impl_result));
        return winrt::Windows::Foundation::Collections::IMapView<hstring, hstring>{ winrt_impl_result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(hstring) consume_AdjustSdk_IAdjustEventFailureClass<D>::ToString() const
    {
        void* winrt_impl_result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustEventFailureClass)->ToString(&winrt_impl_result));
        return hstring{ winrt_impl_result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_AdjustSdk_IAdjustEventSuccessClass<D>::Message(param::hstring const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustEventSuccessClass)->put_Message(*(void**)(&value)));
    }
    template <typename D> WINRT_IMPL_AUTO(hstring) consume_AdjustSdk_IAdjustEventSuccessClass<D>::Message() const
    {
        void* winrt_impl_result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustEventSuccessClass)->get_Message(&winrt_impl_result));
        return hstring{ winrt_impl_result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_AdjustSdk_IAdjustEventSuccessClass<D>::Timestamp(param::hstring const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustEventSuccessClass)->put_Timestamp(*(void**)(&value)));
    }
    template <typename D> WINRT_IMPL_AUTO(hstring) consume_AdjustSdk_IAdjustEventSuccessClass<D>::Timestamp() const
    {
        void* winrt_impl_result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustEventSuccessClass)->get_Timestamp(&winrt_impl_result));
        return hstring{ winrt_impl_result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_AdjustSdk_IAdjustEventSuccessClass<D>::Adid(param::hstring const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustEventSuccessClass)->put_Adid(*(void**)(&value)));
    }
    template <typename D> WINRT_IMPL_AUTO(hstring) consume_AdjustSdk_IAdjustEventSuccessClass<D>::Adid() const
    {
        void* winrt_impl_result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustEventSuccessClass)->get_Adid(&winrt_impl_result));
        return hstring{ winrt_impl_result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_AdjustSdk_IAdjustEventSuccessClass<D>::EventToken(param::hstring const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustEventSuccessClass)->put_EventToken(*(void**)(&value)));
    }
    template <typename D> WINRT_IMPL_AUTO(hstring) consume_AdjustSdk_IAdjustEventSuccessClass<D>::EventToken() const
    {
        void* winrt_impl_result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustEventSuccessClass)->get_EventToken(&winrt_impl_result));
        return hstring{ winrt_impl_result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_AdjustSdk_IAdjustEventSuccessClass<D>::CallbackId(param::hstring const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustEventSuccessClass)->put_CallbackId(*(void**)(&value)));
    }
    template <typename D> WINRT_IMPL_AUTO(hstring) consume_AdjustSdk_IAdjustEventSuccessClass<D>::CallbackId() const
    {
        void* winrt_impl_result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustEventSuccessClass)->get_CallbackId(&winrt_impl_result));
        return hstring{ winrt_impl_result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_AdjustSdk_IAdjustEventSuccessClass<D>::JsonResponse(param::async_map_view<hstring, hstring> const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustEventSuccessClass)->put_JsonResponse(*(void**)(&value)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::Foundation::Collections::IMapView<hstring, hstring>) consume_AdjustSdk_IAdjustEventSuccessClass<D>::JsonResponse() const
    {
        void* winrt_impl_result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustEventSuccessClass)->get_JsonResponse(&winrt_impl_result));
        return winrt::Windows::Foundation::Collections::IMapView<hstring, hstring>{ winrt_impl_result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(hstring) consume_AdjustSdk_IAdjustEventSuccessClass<D>::ToString() const
    {
        void* winrt_impl_result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustEventSuccessClass)->ToString(&winrt_impl_result));
        return hstring{ winrt_impl_result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_AdjustSdk_IAdjustSessionFailureClass<D>::Message(param::hstring const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustSessionFailureClass)->put_Message(*(void**)(&value)));
    }
    template <typename D> WINRT_IMPL_AUTO(hstring) consume_AdjustSdk_IAdjustSessionFailureClass<D>::Message() const
    {
        void* winrt_impl_result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustSessionFailureClass)->get_Message(&winrt_impl_result));
        return hstring{ winrt_impl_result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_AdjustSdk_IAdjustSessionFailureClass<D>::Timestamp(param::hstring const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustSessionFailureClass)->put_Timestamp(*(void**)(&value)));
    }
    template <typename D> WINRT_IMPL_AUTO(hstring) consume_AdjustSdk_IAdjustSessionFailureClass<D>::Timestamp() const
    {
        void* winrt_impl_result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustSessionFailureClass)->get_Timestamp(&winrt_impl_result));
        return hstring{ winrt_impl_result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_AdjustSdk_IAdjustSessionFailureClass<D>::Adid(param::hstring const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustSessionFailureClass)->put_Adid(*(void**)(&value)));
    }
    template <typename D> WINRT_IMPL_AUTO(hstring) consume_AdjustSdk_IAdjustSessionFailureClass<D>::Adid() const
    {
        void* winrt_impl_result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustSessionFailureClass)->get_Adid(&winrt_impl_result));
        return hstring{ winrt_impl_result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_AdjustSdk_IAdjustSessionFailureClass<D>::WillRetry(bool value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustSessionFailureClass)->put_WillRetry(value));
    }
    template <typename D> WINRT_IMPL_AUTO(bool) consume_AdjustSdk_IAdjustSessionFailureClass<D>::WillRetry() const
    {
        bool winrt_impl_result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustSessionFailureClass)->get_WillRetry(&winrt_impl_result));
        return winrt_impl_result;
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_AdjustSdk_IAdjustSessionFailureClass<D>::JsonResponse(param::async_map_view<hstring, hstring> const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustSessionFailureClass)->put_JsonResponse(*(void**)(&value)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::Foundation::Collections::IMapView<hstring, hstring>) consume_AdjustSdk_IAdjustSessionFailureClass<D>::JsonResponse() const
    {
        void* winrt_impl_result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustSessionFailureClass)->get_JsonResponse(&winrt_impl_result));
        return winrt::Windows::Foundation::Collections::IMapView<hstring, hstring>{ winrt_impl_result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(hstring) consume_AdjustSdk_IAdjustSessionFailureClass<D>::ToString() const
    {
        void* winrt_impl_result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustSessionFailureClass)->ToString(&winrt_impl_result));
        return hstring{ winrt_impl_result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_AdjustSdk_IAdjustSessionSuccessClass<D>::Message(param::hstring const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustSessionSuccessClass)->put_Message(*(void**)(&value)));
    }
    template <typename D> WINRT_IMPL_AUTO(hstring) consume_AdjustSdk_IAdjustSessionSuccessClass<D>::Message() const
    {
        void* winrt_impl_result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustSessionSuccessClass)->get_Message(&winrt_impl_result));
        return hstring{ winrt_impl_result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_AdjustSdk_IAdjustSessionSuccessClass<D>::Timestamp(param::hstring const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustSessionSuccessClass)->put_Timestamp(*(void**)(&value)));
    }
    template <typename D> WINRT_IMPL_AUTO(hstring) consume_AdjustSdk_IAdjustSessionSuccessClass<D>::Timestamp() const
    {
        void* winrt_impl_result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustSessionSuccessClass)->get_Timestamp(&winrt_impl_result));
        return hstring{ winrt_impl_result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_AdjustSdk_IAdjustSessionSuccessClass<D>::Adid(param::hstring const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustSessionSuccessClass)->put_Adid(*(void**)(&value)));
    }
    template <typename D> WINRT_IMPL_AUTO(hstring) consume_AdjustSdk_IAdjustSessionSuccessClass<D>::Adid() const
    {
        void* winrt_impl_result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustSessionSuccessClass)->get_Adid(&winrt_impl_result));
        return hstring{ winrt_impl_result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_AdjustSdk_IAdjustSessionSuccessClass<D>::JsonResponse(param::async_map_view<hstring, hstring> const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustSessionSuccessClass)->put_JsonResponse(*(void**)(&value)));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::Windows::Foundation::Collections::IMapView<hstring, hstring>) consume_AdjustSdk_IAdjustSessionSuccessClass<D>::JsonResponse() const
    {
        void* winrt_impl_result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustSessionSuccessClass)->get_JsonResponse(&winrt_impl_result));
        return winrt::Windows::Foundation::Collections::IMapView<hstring, hstring>{ winrt_impl_result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(hstring) consume_AdjustSdk_IAdjustSessionSuccessClass<D>::ToString() const
    {
        void* winrt_impl_result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustSessionSuccessClass)->ToString(&winrt_impl_result));
        return hstring{ winrt_impl_result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(bool) consume_AdjustSdk_IAdjustStatic<D>::ApplicationLaunched() const
    {
        bool winrt_impl_result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustStatic)->get_ApplicationLaunched(&winrt_impl_result));
        return winrt_impl_result;
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_AdjustSdk_IAdjustStatic<D>::ApplicationLaunching(winrt::AdjustSdk::AdjustConfig const& adjustConfig) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustStatic)->ApplicationLaunching(*(void**)(&adjustConfig)));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_AdjustSdk_IAdjustStatic<D>::ApplicationActivated() const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustStatic)->ApplicationActivated());
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_AdjustSdk_IAdjustStatic<D>::ApplicationDeactivated() const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustStatic)->ApplicationDeactivated());
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_AdjustSdk_IAdjustStatic<D>::TrackEvent(winrt::AdjustSdk::AdjustEvent const& adjustEvent) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustStatic)->TrackEvent(*(void**)(&adjustEvent)));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_AdjustSdk_IAdjustStatic<D>::SetEnabled(bool enabled) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustStatic)->SetEnabled(enabled));
    }
    template <typename D> WINRT_IMPL_AUTO(bool) consume_AdjustSdk_IAdjustStatic<D>::IsEnabled() const
    {
        bool winrt_impl_result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustStatic)->IsEnabled(&winrt_impl_result));
        return winrt_impl_result;
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_AdjustSdk_IAdjustStatic<D>::SetOfflineMode(bool offlineMode) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustStatic)->SetOfflineMode(offlineMode));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_AdjustSdk_IAdjustStatic<D>::AppWillOpenUrl(winrt::Windows::Foundation::Uri const& url) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustStatic)->AppWillOpenUrl(*(void**)(&url)));
    }
    template <typename D> WINRT_IMPL_AUTO(hstring) consume_AdjustSdk_IAdjustStatic<D>::GetWindowsAdId() const
    {
        void* winrt_impl_result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustStatic)->GetWindowsAdId(&winrt_impl_result));
        return hstring{ winrt_impl_result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_AdjustSdk_IAdjustStatic<D>::AddSessionCallbackParameter(param::hstring const& key, param::hstring const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustStatic)->AddSessionCallbackParameter(*(void**)(&key), *(void**)(&value)));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_AdjustSdk_IAdjustStatic<D>::AddSessionPartnerParameter(param::hstring const& key, param::hstring const& value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustStatic)->AddSessionPartnerParameter(*(void**)(&key), *(void**)(&value)));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_AdjustSdk_IAdjustStatic<D>::RemoveSessionCallbackParameter(param::hstring const& key) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustStatic)->RemoveSessionCallbackParameter(*(void**)(&key)));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_AdjustSdk_IAdjustStatic<D>::RemoveSessionPartnerParameter(param::hstring const& key) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustStatic)->RemoveSessionPartnerParameter(*(void**)(&key)));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_AdjustSdk_IAdjustStatic<D>::ResetSessionCallbackParameters() const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustStatic)->ResetSessionCallbackParameters());
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_AdjustSdk_IAdjustStatic<D>::ResetSessionPartnerParameters() const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustStatic)->ResetSessionPartnerParameters());
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_AdjustSdk_IAdjustStatic<D>::SendFirstPackages() const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustStatic)->SendFirstPackages());
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_AdjustSdk_IAdjustStatic<D>::SetPushToken(param::hstring const& pushToken) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustStatic)->SetPushToken(*(void**)(&pushToken)));
    }
    template <typename D> WINRT_IMPL_AUTO(hstring) consume_AdjustSdk_IAdjustStatic<D>::GetAdid() const
    {
        void* winrt_impl_result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustStatic)->GetAdid(&winrt_impl_result));
        return hstring{ winrt_impl_result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::AdjustSdk::AdjustAttribution) consume_AdjustSdk_IAdjustStatic<D>::GetAttributon() const
    {
        void* winrt_impl_result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustStatic)->GetAttributon(&winrt_impl_result));
        return winrt::AdjustSdk::AdjustAttribution{ winrt_impl_result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_AdjustSdk_IAdjustStatic<D>::GdprForgetMe() const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustStatic)->GdprForgetMe());
    }
    template <typename D> WINRT_IMPL_AUTO(hstring) consume_AdjustSdk_IAdjustStatic<D>::GetSdkVersion() const
    {
        void* winrt_impl_result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IAdjustStatic)->GetSdkVersion(&winrt_impl_result));
        return hstring{ winrt_impl_result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_AdjustSdk_IExampleClass<D>::SampleProperty(int32_t value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IExampleClass)->put_SampleProperty(value));
    }
    template <typename D> WINRT_IMPL_AUTO(int32_t) consume_AdjustSdk_IExampleClass<D>::SampleProperty() const
    {
        int32_t winrt_impl_result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IExampleClass)->get_SampleProperty(&winrt_impl_result));
        return winrt_impl_result;
    }
    template <typename D> WINRT_IMPL_AUTO(hstring) consume_AdjustSdk_IExampleStatic<D>::SayHello() const
    {
        void* winrt_impl_result{};
        check_hresult(WINRT_IMPL_SHIM(winrt::AdjustSdk::IExampleStatic)->SayHello(&winrt_impl_result));
        return hstring{ winrt_impl_result, take_ownership_from_abi };
    }
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::AdjustSdk::IAdjustAttributionClass> : produce_base<D, winrt::AdjustSdk::IAdjustAttributionClass>
    {
        int32_t __stdcall put_TrackerToken(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().TrackerToken(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_TrackerToken(void** winrt_impl_result) noexcept final try
        {
            clear_abi(winrt_impl_result);
            typename D::abi_guard guard(this->shim());
            *winrt_impl_result = detach_from<hstring>(this->shim().TrackerToken());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_TrackerName(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().TrackerName(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_TrackerName(void** winrt_impl_result) noexcept final try
        {
            clear_abi(winrt_impl_result);
            typename D::abi_guard guard(this->shim());
            *winrt_impl_result = detach_from<hstring>(this->shim().TrackerName());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Network(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Network(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Network(void** winrt_impl_result) noexcept final try
        {
            clear_abi(winrt_impl_result);
            typename D::abi_guard guard(this->shim());
            *winrt_impl_result = detach_from<hstring>(this->shim().Network());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Campaign(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Campaign(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Campaign(void** winrt_impl_result) noexcept final try
        {
            clear_abi(winrt_impl_result);
            typename D::abi_guard guard(this->shim());
            *winrt_impl_result = detach_from<hstring>(this->shim().Campaign());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Adgroup(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Adgroup(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Adgroup(void** winrt_impl_result) noexcept final try
        {
            clear_abi(winrt_impl_result);
            typename D::abi_guard guard(this->shim());
            *winrt_impl_result = detach_from<hstring>(this->shim().Adgroup());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Creative(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Creative(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Creative(void** winrt_impl_result) noexcept final try
        {
            clear_abi(winrt_impl_result);
            typename D::abi_guard guard(this->shim());
            *winrt_impl_result = detach_from<hstring>(this->shim().Creative());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_ClickLabel(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ClickLabel(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_ClickLabel(void** winrt_impl_result) noexcept final try
        {
            clear_abi(winrt_impl_result);
            typename D::abi_guard guard(this->shim());
            *winrt_impl_result = detach_from<hstring>(this->shim().ClickLabel());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Adid(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Adid(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Adid(void** winrt_impl_result) noexcept final try
        {
            clear_abi(winrt_impl_result);
            typename D::abi_guard guard(this->shim());
            *winrt_impl_result = detach_from<hstring>(this->shim().Adid());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall Equals(void* obj, bool* winrt_impl_result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *winrt_impl_result = detach_from<bool>(this->shim().Equals(*reinterpret_cast<winrt::Windows::Foundation::IInspectable const*>(&obj)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetHashCode(int32_t* winrt_impl_result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *winrt_impl_result = detach_from<int32_t>(this->shim().GetHashCode());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall ToString(void** winrt_impl_result) noexcept final try
        {
            clear_abi(winrt_impl_result);
            typename D::abi_guard guard(this->shim());
            *winrt_impl_result = detach_from<hstring>(this->shim().ToString());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::AdjustSdk::IAdjustAttributionStatic> : produce_base<D, winrt::AdjustSdk::IAdjustAttributionStatic>
    {
        int32_t __stdcall FromJsonString(void* attributionString, void* adid, void** winrt_impl_result) noexcept final try
        {
            clear_abi(winrt_impl_result);
            typename D::abi_guard guard(this->shim());
            *winrt_impl_result = detach_from<winrt::AdjustSdk::AdjustAttribution>(this->shim().FromJsonString(*reinterpret_cast<hstring const*>(&attributionString), *reinterpret_cast<hstring const*>(&adid)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall ToDictionary(void* attribution, void** winrt_impl_result) noexcept final try
        {
            clear_abi(winrt_impl_result);
            typename D::abi_guard guard(this->shim());
            *winrt_impl_result = detach_from<winrt::Windows::Foundation::Collections::IMapView<hstring, winrt::Windows::Foundation::IInspectable>>(this->shim().ToDictionary(*reinterpret_cast<winrt::AdjustSdk::AdjustAttribution const*>(&attribution)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall FromDictionary(void* attributionObjectMap, void** winrt_impl_result) noexcept final try
        {
            clear_abi(winrt_impl_result);
            typename D::abi_guard guard(this->shim());
            *winrt_impl_result = detach_from<winrt::AdjustSdk::AdjustAttribution>(this->shim().FromDictionary(*reinterpret_cast<winrt::Windows::Foundation::Collections::IMapView<hstring, winrt::Windows::Foundation::IInspectable> const*>(&attributionObjectMap)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::AdjustSdk::IAdjustClass> : produce_base<D, winrt::AdjustSdk::IAdjustClass>
    {
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::AdjustSdk::IAdjustConfigClass> : produce_base<D, winrt::AdjustSdk::IAdjustConfigClass>
    {
        int32_t __stdcall put_SdkPrefix(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SdkPrefix(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_SdkPrefix(void** winrt_impl_result) noexcept final try
        {
            clear_abi(winrt_impl_result);
            typename D::abi_guard guard(this->shim());
            *winrt_impl_result = detach_from<hstring>(this->shim().SdkPrefix());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_EventBufferingEnabled(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().EventBufferingEnabled(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_EventBufferingEnabled(bool* winrt_impl_result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *winrt_impl_result = detach_from<bool>(this->shim().EventBufferingEnabled());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_DefaultTracker(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().DefaultTracker(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_DefaultTracker(void** winrt_impl_result) noexcept final try
        {
            clear_abi(winrt_impl_result);
            typename D::abi_guard guard(this->shim());
            *winrt_impl_result = detach_from<hstring>(this->shim().DefaultTracker());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_SendInBackground(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SendInBackground(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_SendInBackground(bool* winrt_impl_result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *winrt_impl_result = detach_from<bool>(this->shim().SendInBackground());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_DelayStart(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().DelayStart(*reinterpret_cast<winrt::Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_DelayStart(void** winrt_impl_result) noexcept final try
        {
            clear_abi(winrt_impl_result);
            typename D::abi_guard guard(this->shim());
            *winrt_impl_result = detach_from<winrt::Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan>>(this->shim().DelayStart());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_AttributionChanged(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().AttributionChanged(*reinterpret_cast<winrt::Windows::Foundation::EventHandler<winrt::AdjustSdk::AdjustAttribution> const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_AttributionChanged(void** winrt_impl_result) noexcept final try
        {
            clear_abi(winrt_impl_result);
            typename D::abi_guard guard(this->shim());
            *winrt_impl_result = detach_from<winrt::Windows::Foundation::EventHandler<winrt::AdjustSdk::AdjustAttribution>>(this->shim().AttributionChanged());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall SetUserAgent(void* userAgent) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetUserAgent(*reinterpret_cast<hstring const*>(&userAgent));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall SetDeviceKnown(bool deviceKnown) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetDeviceKnown(deviceKnown);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsValid(bool* winrt_impl_result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *winrt_impl_result = detach_from<bool>(this->shim().IsValid());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall SetAppSecret(int64_t secretId, int64_t info1, int64_t info2, int64_t info3, int64_t info4) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetAppSecret(secretId, info1, info2, info3, info4);
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::AdjustSdk::IAdjustConfigFactory> : produce_base<D, winrt::AdjustSdk::IAdjustConfigFactory>
    {
        int32_t __stdcall CreateAdjustConfig(void* appToken, void* environment, void* logLevel, void** winrt_impl_result) noexcept final try
        {
            clear_abi(winrt_impl_result);
            typename D::abi_guard guard(this->shim());
            *winrt_impl_result = detach_from<winrt::AdjustSdk::AdjustConfig>(this->shim().CreateAdjustConfig(*reinterpret_cast<hstring const*>(&appToken), *reinterpret_cast<hstring const*>(&environment), *reinterpret_cast<winrt::Windows::Foundation::IReference<winrt::AdjustSdk::LogLevel> const*>(&logLevel)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::AdjustSdk::IAdjustEventClass> : produce_base<D, winrt::AdjustSdk::IAdjustEventClass>
    {
        int32_t __stdcall put_PurchaseId(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PurchaseId(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_PurchaseId(void** winrt_impl_result) noexcept final try
        {
            clear_abi(winrt_impl_result);
            typename D::abi_guard guard(this->shim());
            *winrt_impl_result = detach_from<hstring>(this->shim().PurchaseId());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_CallbackId(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().CallbackId(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_CallbackId(void** winrt_impl_result) noexcept final try
        {
            clear_abi(winrt_impl_result);
            typename D::abi_guard guard(this->shim());
            *winrt_impl_result = detach_from<hstring>(this->shim().CallbackId());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall SetRevenue(double revenue, void* currency) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetRevenue(revenue, *reinterpret_cast<hstring const*>(&currency));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AddCallbackParameter(void* key, void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().AddCallbackParameter(*reinterpret_cast<hstring const*>(&key), *reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AddPartnerParameter(void* key, void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().AddPartnerParameter(*reinterpret_cast<hstring const*>(&key), *reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsValid(bool* winrt_impl_result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *winrt_impl_result = detach_from<bool>(this->shim().IsValid());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::AdjustSdk::IAdjustEventFactory> : produce_base<D, winrt::AdjustSdk::IAdjustEventFactory>
    {
        int32_t __stdcall CreateAdjustEvent(void* eventToken, void** winrt_impl_result) noexcept final try
        {
            clear_abi(winrt_impl_result);
            typename D::abi_guard guard(this->shim());
            *winrt_impl_result = detach_from<winrt::AdjustSdk::AdjustEvent>(this->shim().CreateAdjustEvent(*reinterpret_cast<hstring const*>(&eventToken)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::AdjustSdk::IAdjustEventFailureClass> : produce_base<D, winrt::AdjustSdk::IAdjustEventFailureClass>
    {
        int32_t __stdcall put_Message(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Message(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Message(void** winrt_impl_result) noexcept final try
        {
            clear_abi(winrt_impl_result);
            typename D::abi_guard guard(this->shim());
            *winrt_impl_result = detach_from<hstring>(this->shim().Message());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Timestamp(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Timestamp(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Timestamp(void** winrt_impl_result) noexcept final try
        {
            clear_abi(winrt_impl_result);
            typename D::abi_guard guard(this->shim());
            *winrt_impl_result = detach_from<hstring>(this->shim().Timestamp());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Adid(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Adid(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Adid(void** winrt_impl_result) noexcept final try
        {
            clear_abi(winrt_impl_result);
            typename D::abi_guard guard(this->shim());
            *winrt_impl_result = detach_from<hstring>(this->shim().Adid());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_EventToken(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().EventToken(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_EventToken(void** winrt_impl_result) noexcept final try
        {
            clear_abi(winrt_impl_result);
            typename D::abi_guard guard(this->shim());
            *winrt_impl_result = detach_from<hstring>(this->shim().EventToken());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_WillRetry(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().WillRetry(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_WillRetry(bool* winrt_impl_result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *winrt_impl_result = detach_from<bool>(this->shim().WillRetry());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_CallbackId(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().CallbackId(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_CallbackId(void** winrt_impl_result) noexcept final try
        {
            clear_abi(winrt_impl_result);
            typename D::abi_guard guard(this->shim());
            *winrt_impl_result = detach_from<hstring>(this->shim().CallbackId());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_JsonResponse(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().JsonResponse(*reinterpret_cast<winrt::Windows::Foundation::Collections::IMapView<hstring, hstring> const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_JsonResponse(void** winrt_impl_result) noexcept final try
        {
            clear_abi(winrt_impl_result);
            typename D::abi_guard guard(this->shim());
            *winrt_impl_result = detach_from<winrt::Windows::Foundation::Collections::IMapView<hstring, hstring>>(this->shim().JsonResponse());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall ToString(void** winrt_impl_result) noexcept final try
        {
            clear_abi(winrt_impl_result);
            typename D::abi_guard guard(this->shim());
            *winrt_impl_result = detach_from<hstring>(this->shim().ToString());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::AdjustSdk::IAdjustEventSuccessClass> : produce_base<D, winrt::AdjustSdk::IAdjustEventSuccessClass>
    {
        int32_t __stdcall put_Message(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Message(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Message(void** winrt_impl_result) noexcept final try
        {
            clear_abi(winrt_impl_result);
            typename D::abi_guard guard(this->shim());
            *winrt_impl_result = detach_from<hstring>(this->shim().Message());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Timestamp(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Timestamp(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Timestamp(void** winrt_impl_result) noexcept final try
        {
            clear_abi(winrt_impl_result);
            typename D::abi_guard guard(this->shim());
            *winrt_impl_result = detach_from<hstring>(this->shim().Timestamp());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Adid(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Adid(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Adid(void** winrt_impl_result) noexcept final try
        {
            clear_abi(winrt_impl_result);
            typename D::abi_guard guard(this->shim());
            *winrt_impl_result = detach_from<hstring>(this->shim().Adid());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_EventToken(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().EventToken(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_EventToken(void** winrt_impl_result) noexcept final try
        {
            clear_abi(winrt_impl_result);
            typename D::abi_guard guard(this->shim());
            *winrt_impl_result = detach_from<hstring>(this->shim().EventToken());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_CallbackId(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().CallbackId(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_CallbackId(void** winrt_impl_result) noexcept final try
        {
            clear_abi(winrt_impl_result);
            typename D::abi_guard guard(this->shim());
            *winrt_impl_result = detach_from<hstring>(this->shim().CallbackId());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_JsonResponse(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().JsonResponse(*reinterpret_cast<winrt::Windows::Foundation::Collections::IMapView<hstring, hstring> const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_JsonResponse(void** winrt_impl_result) noexcept final try
        {
            clear_abi(winrt_impl_result);
            typename D::abi_guard guard(this->shim());
            *winrt_impl_result = detach_from<winrt::Windows::Foundation::Collections::IMapView<hstring, hstring>>(this->shim().JsonResponse());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall ToString(void** winrt_impl_result) noexcept final try
        {
            clear_abi(winrt_impl_result);
            typename D::abi_guard guard(this->shim());
            *winrt_impl_result = detach_from<hstring>(this->shim().ToString());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::AdjustSdk::IAdjustSessionFailureClass> : produce_base<D, winrt::AdjustSdk::IAdjustSessionFailureClass>
    {
        int32_t __stdcall put_Message(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Message(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Message(void** winrt_impl_result) noexcept final try
        {
            clear_abi(winrt_impl_result);
            typename D::abi_guard guard(this->shim());
            *winrt_impl_result = detach_from<hstring>(this->shim().Message());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Timestamp(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Timestamp(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Timestamp(void** winrt_impl_result) noexcept final try
        {
            clear_abi(winrt_impl_result);
            typename D::abi_guard guard(this->shim());
            *winrt_impl_result = detach_from<hstring>(this->shim().Timestamp());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Adid(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Adid(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Adid(void** winrt_impl_result) noexcept final try
        {
            clear_abi(winrt_impl_result);
            typename D::abi_guard guard(this->shim());
            *winrt_impl_result = detach_from<hstring>(this->shim().Adid());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_WillRetry(bool value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().WillRetry(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_WillRetry(bool* winrt_impl_result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *winrt_impl_result = detach_from<bool>(this->shim().WillRetry());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_JsonResponse(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().JsonResponse(*reinterpret_cast<winrt::Windows::Foundation::Collections::IMapView<hstring, hstring> const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_JsonResponse(void** winrt_impl_result) noexcept final try
        {
            clear_abi(winrt_impl_result);
            typename D::abi_guard guard(this->shim());
            *winrt_impl_result = detach_from<winrt::Windows::Foundation::Collections::IMapView<hstring, hstring>>(this->shim().JsonResponse());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall ToString(void** winrt_impl_result) noexcept final try
        {
            clear_abi(winrt_impl_result);
            typename D::abi_guard guard(this->shim());
            *winrt_impl_result = detach_from<hstring>(this->shim().ToString());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::AdjustSdk::IAdjustSessionSuccessClass> : produce_base<D, winrt::AdjustSdk::IAdjustSessionSuccessClass>
    {
        int32_t __stdcall put_Message(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Message(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Message(void** winrt_impl_result) noexcept final try
        {
            clear_abi(winrt_impl_result);
            typename D::abi_guard guard(this->shim());
            *winrt_impl_result = detach_from<hstring>(this->shim().Message());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Timestamp(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Timestamp(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Timestamp(void** winrt_impl_result) noexcept final try
        {
            clear_abi(winrt_impl_result);
            typename D::abi_guard guard(this->shim());
            *winrt_impl_result = detach_from<hstring>(this->shim().Timestamp());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_Adid(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Adid(*reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_Adid(void** winrt_impl_result) noexcept final try
        {
            clear_abi(winrt_impl_result);
            typename D::abi_guard guard(this->shim());
            *winrt_impl_result = detach_from<hstring>(this->shim().Adid());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_JsonResponse(void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().JsonResponse(*reinterpret_cast<winrt::Windows::Foundation::Collections::IMapView<hstring, hstring> const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_JsonResponse(void** winrt_impl_result) noexcept final try
        {
            clear_abi(winrt_impl_result);
            typename D::abi_guard guard(this->shim());
            *winrt_impl_result = detach_from<winrt::Windows::Foundation::Collections::IMapView<hstring, hstring>>(this->shim().JsonResponse());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall ToString(void** winrt_impl_result) noexcept final try
        {
            clear_abi(winrt_impl_result);
            typename D::abi_guard guard(this->shim());
            *winrt_impl_result = detach_from<hstring>(this->shim().ToString());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::AdjustSdk::IAdjustStatic> : produce_base<D, winrt::AdjustSdk::IAdjustStatic>
    {
        int32_t __stdcall get_ApplicationLaunched(bool* winrt_impl_result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *winrt_impl_result = detach_from<bool>(this->shim().ApplicationLaunched());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall ApplicationLaunching(void* adjustConfig) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ApplicationLaunching(*reinterpret_cast<winrt::AdjustSdk::AdjustConfig const*>(&adjustConfig));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall ApplicationActivated() noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ApplicationActivated();
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall ApplicationDeactivated() noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ApplicationDeactivated();
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall TrackEvent(void* adjustEvent) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().TrackEvent(*reinterpret_cast<winrt::AdjustSdk::AdjustEvent const*>(&adjustEvent));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall SetEnabled(bool enabled) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetEnabled(enabled);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall IsEnabled(bool* winrt_impl_result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *winrt_impl_result = detach_from<bool>(this->shim().IsEnabled());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall SetOfflineMode(bool offlineMode) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetOfflineMode(offlineMode);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AppWillOpenUrl(void* url) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().AppWillOpenUrl(*reinterpret_cast<winrt::Windows::Foundation::Uri const*>(&url));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetWindowsAdId(void** winrt_impl_result) noexcept final try
        {
            clear_abi(winrt_impl_result);
            typename D::abi_guard guard(this->shim());
            *winrt_impl_result = detach_from<hstring>(this->shim().GetWindowsAdId());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AddSessionCallbackParameter(void* key, void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().AddSessionCallbackParameter(*reinterpret_cast<hstring const*>(&key), *reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall AddSessionPartnerParameter(void* key, void* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().AddSessionPartnerParameter(*reinterpret_cast<hstring const*>(&key), *reinterpret_cast<hstring const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall RemoveSessionCallbackParameter(void* key) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().RemoveSessionCallbackParameter(*reinterpret_cast<hstring const*>(&key));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall RemoveSessionPartnerParameter(void* key) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().RemoveSessionPartnerParameter(*reinterpret_cast<hstring const*>(&key));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall ResetSessionCallbackParameters() noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ResetSessionCallbackParameters();
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall ResetSessionPartnerParameters() noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ResetSessionPartnerParameters();
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall SendFirstPackages() noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SendFirstPackages();
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall SetPushToken(void* pushToken) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetPushToken(*reinterpret_cast<hstring const*>(&pushToken));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetAdid(void** winrt_impl_result) noexcept final try
        {
            clear_abi(winrt_impl_result);
            typename D::abi_guard guard(this->shim());
            *winrt_impl_result = detach_from<hstring>(this->shim().GetAdid());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetAttributon(void** winrt_impl_result) noexcept final try
        {
            clear_abi(winrt_impl_result);
            typename D::abi_guard guard(this->shim());
            *winrt_impl_result = detach_from<winrt::AdjustSdk::AdjustAttribution>(this->shim().GetAttributon());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GdprForgetMe() noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().GdprForgetMe();
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetSdkVersion(void** winrt_impl_result) noexcept final try
        {
            clear_abi(winrt_impl_result);
            typename D::abi_guard guard(this->shim());
            *winrt_impl_result = detach_from<hstring>(this->shim().GetSdkVersion());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::AdjustSdk::IExampleClass> : produce_base<D, winrt::AdjustSdk::IExampleClass>
    {
        int32_t __stdcall put_SampleProperty(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SampleProperty(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall get_SampleProperty(int32_t* winrt_impl_result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *winrt_impl_result = detach_from<int32_t>(this->shim().SampleProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
#ifndef WINRT_LEAN_AND_MEAN
    template <typename D>
    struct produce<D, winrt::AdjustSdk::IExampleStatic> : produce_base<D, winrt::AdjustSdk::IExampleStatic>
    {
        int32_t __stdcall SayHello(void** winrt_impl_result) noexcept final try
        {
            clear_abi(winrt_impl_result);
            typename D::abi_guard guard(this->shim());
            *winrt_impl_result = detach_from<hstring>(this->shim().SayHello());
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
#endif
}
WINRT_EXPORT namespace winrt::AdjustSdk
{
    inline Adjust::Adjust() :
        Adjust(impl::call_factory_cast<Adjust(*)(winrt::Windows::Foundation::IActivationFactory const&), Adjust>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<Adjust>(); }))
    {
    }
    inline auto Adjust::ApplicationLaunched()
    {
        return impl::call_factory_cast<bool(*)(IAdjustStatic const&), Adjust, IAdjustStatic>([](IAdjustStatic const& f) { return f.ApplicationLaunched(); });
    }
    inline auto Adjust::ApplicationLaunching(winrt::AdjustSdk::AdjustConfig const& adjustConfig)
    {
        impl::call_factory<Adjust, IAdjustStatic>([&](IAdjustStatic const& f) { return f.ApplicationLaunching(adjustConfig); });
    }
    inline auto Adjust::ApplicationActivated()
    {
        impl::call_factory_cast<void(*)(IAdjustStatic const&), Adjust, IAdjustStatic>([](IAdjustStatic const& f) { return f.ApplicationActivated(); });
    }
    inline auto Adjust::ApplicationDeactivated()
    {
        impl::call_factory_cast<void(*)(IAdjustStatic const&), Adjust, IAdjustStatic>([](IAdjustStatic const& f) { return f.ApplicationDeactivated(); });
    }
    inline auto Adjust::TrackEvent(winrt::AdjustSdk::AdjustEvent const& adjustEvent)
    {
        impl::call_factory<Adjust, IAdjustStatic>([&](IAdjustStatic const& f) { return f.TrackEvent(adjustEvent); });
    }
    inline auto Adjust::SetEnabled(bool enabled)
    {
        impl::call_factory<Adjust, IAdjustStatic>([&](IAdjustStatic const& f) { return f.SetEnabled(enabled); });
    }
    inline auto Adjust::IsEnabled()
    {
        return impl::call_factory_cast<bool(*)(IAdjustStatic const&), Adjust, IAdjustStatic>([](IAdjustStatic const& f) { return f.IsEnabled(); });
    }
    inline auto Adjust::SetOfflineMode(bool offlineMode)
    {
        impl::call_factory<Adjust, IAdjustStatic>([&](IAdjustStatic const& f) { return f.SetOfflineMode(offlineMode); });
    }
    inline auto Adjust::AppWillOpenUrl(winrt::Windows::Foundation::Uri const& url)
    {
        impl::call_factory<Adjust, IAdjustStatic>([&](IAdjustStatic const& f) { return f.AppWillOpenUrl(url); });
    }
    inline auto Adjust::GetWindowsAdId()
    {
        return impl::call_factory_cast<hstring(*)(IAdjustStatic const&), Adjust, IAdjustStatic>([](IAdjustStatic const& f) { return f.GetWindowsAdId(); });
    }
    inline auto Adjust::AddSessionCallbackParameter(param::hstring const& key, param::hstring const& value)
    {
        impl::call_factory<Adjust, IAdjustStatic>([&](IAdjustStatic const& f) { return f.AddSessionCallbackParameter(key, value); });
    }
    inline auto Adjust::AddSessionPartnerParameter(param::hstring const& key, param::hstring const& value)
    {
        impl::call_factory<Adjust, IAdjustStatic>([&](IAdjustStatic const& f) { return f.AddSessionPartnerParameter(key, value); });
    }
    inline auto Adjust::RemoveSessionCallbackParameter(param::hstring const& key)
    {
        impl::call_factory<Adjust, IAdjustStatic>([&](IAdjustStatic const& f) { return f.RemoveSessionCallbackParameter(key); });
    }
    inline auto Adjust::RemoveSessionPartnerParameter(param::hstring const& key)
    {
        impl::call_factory<Adjust, IAdjustStatic>([&](IAdjustStatic const& f) { return f.RemoveSessionPartnerParameter(key); });
    }
    inline auto Adjust::ResetSessionCallbackParameters()
    {
        impl::call_factory_cast<void(*)(IAdjustStatic const&), Adjust, IAdjustStatic>([](IAdjustStatic const& f) { return f.ResetSessionCallbackParameters(); });
    }
    inline auto Adjust::ResetSessionPartnerParameters()
    {
        impl::call_factory_cast<void(*)(IAdjustStatic const&), Adjust, IAdjustStatic>([](IAdjustStatic const& f) { return f.ResetSessionPartnerParameters(); });
    }
    inline auto Adjust::SendFirstPackages()
    {
        impl::call_factory_cast<void(*)(IAdjustStatic const&), Adjust, IAdjustStatic>([](IAdjustStatic const& f) { return f.SendFirstPackages(); });
    }
    inline auto Adjust::SetPushToken(param::hstring const& pushToken)
    {
        impl::call_factory<Adjust, IAdjustStatic>([&](IAdjustStatic const& f) { return f.SetPushToken(pushToken); });
    }
    inline auto Adjust::GetAdid()
    {
        return impl::call_factory_cast<hstring(*)(IAdjustStatic const&), Adjust, IAdjustStatic>([](IAdjustStatic const& f) { return f.GetAdid(); });
    }
    inline auto Adjust::GetAttributon()
    {
        return impl::call_factory_cast<winrt::AdjustSdk::AdjustAttribution(*)(IAdjustStatic const&), Adjust, IAdjustStatic>([](IAdjustStatic const& f) { return f.GetAttributon(); });
    }
    inline auto Adjust::GdprForgetMe()
    {
        impl::call_factory_cast<void(*)(IAdjustStatic const&), Adjust, IAdjustStatic>([](IAdjustStatic const& f) { return f.GdprForgetMe(); });
    }
    inline auto Adjust::GetSdkVersion()
    {
        return impl::call_factory_cast<hstring(*)(IAdjustStatic const&), Adjust, IAdjustStatic>([](IAdjustStatic const& f) { return f.GetSdkVersion(); });
    }
    inline AdjustAttribution::AdjustAttribution() :
        AdjustAttribution(impl::call_factory_cast<AdjustAttribution(*)(winrt::Windows::Foundation::IActivationFactory const&), AdjustAttribution>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<AdjustAttribution>(); }))
    {
    }
    inline auto AdjustAttribution::FromJsonString(param::hstring const& attributionString, param::hstring const& adid)
    {
        return impl::call_factory<AdjustAttribution, IAdjustAttributionStatic>([&](IAdjustAttributionStatic const& f) { return f.FromJsonString(attributionString, adid); });
    }
    inline auto AdjustAttribution::ToDictionary(winrt::AdjustSdk::AdjustAttribution const& attribution)
    {
        return impl::call_factory<AdjustAttribution, IAdjustAttributionStatic>([&](IAdjustAttributionStatic const& f) { return f.ToDictionary(attribution); });
    }
    inline auto AdjustAttribution::FromDictionary(param::map_view<hstring, winrt::Windows::Foundation::IInspectable> const& attributionObjectMap)
    {
        return impl::call_factory<AdjustAttribution, IAdjustAttributionStatic>([&](IAdjustAttributionStatic const& f) { return f.FromDictionary(attributionObjectMap); });
    }
    inline AdjustConfig::AdjustConfig(param::hstring const& appToken, param::hstring const& environment, winrt::Windows::Foundation::IReference<winrt::AdjustSdk::LogLevel> const& logLevel) :
        AdjustConfig(impl::call_factory<AdjustConfig, IAdjustConfigFactory>([&](IAdjustConfigFactory const& f) { return f.CreateAdjustConfig(appToken, environment, logLevel); }))
    {
    }
    inline AdjustEvent::AdjustEvent(param::hstring const& eventToken) :
        AdjustEvent(impl::call_factory<AdjustEvent, IAdjustEventFactory>([&](IAdjustEventFactory const& f) { return f.CreateAdjustEvent(eventToken); }))
    {
    }
    inline AdjustEventFailure::AdjustEventFailure() :
        AdjustEventFailure(impl::call_factory_cast<AdjustEventFailure(*)(winrt::Windows::Foundation::IActivationFactory const&), AdjustEventFailure>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<AdjustEventFailure>(); }))
    {
    }
    inline AdjustEventSuccess::AdjustEventSuccess() :
        AdjustEventSuccess(impl::call_factory_cast<AdjustEventSuccess(*)(winrt::Windows::Foundation::IActivationFactory const&), AdjustEventSuccess>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<AdjustEventSuccess>(); }))
    {
    }
    inline AdjustSessionFailure::AdjustSessionFailure() :
        AdjustSessionFailure(impl::call_factory_cast<AdjustSessionFailure(*)(winrt::Windows::Foundation::IActivationFactory const&), AdjustSessionFailure>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<AdjustSessionFailure>(); }))
    {
    }
    inline AdjustSessionSuccess::AdjustSessionSuccess() :
        AdjustSessionSuccess(impl::call_factory_cast<AdjustSessionSuccess(*)(winrt::Windows::Foundation::IActivationFactory const&), AdjustSessionSuccess>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<AdjustSessionSuccess>(); }))
    {
    }
    inline Example::Example() :
        Example(impl::call_factory_cast<Example(*)(winrt::Windows::Foundation::IActivationFactory const&), Example>([](winrt::Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<Example>(); }))
    {
    }
    inline auto Example::SayHello()
    {
        return impl::call_factory_cast<hstring(*)(IExampleStatic const&), Example, IExampleStatic>([](IExampleStatic const& f) { return f.SayHello(); });
    }
}
namespace std
{
#ifndef WINRT_LEAN_AND_MEAN
    template<> struct hash<winrt::AdjustSdk::IAdjustAttributionClass> : winrt::impl::hash_base {};
    template<> struct hash<winrt::AdjustSdk::IAdjustAttributionStatic> : winrt::impl::hash_base {};
    template<> struct hash<winrt::AdjustSdk::IAdjustClass> : winrt::impl::hash_base {};
    template<> struct hash<winrt::AdjustSdk::IAdjustConfigClass> : winrt::impl::hash_base {};
    template<> struct hash<winrt::AdjustSdk::IAdjustConfigFactory> : winrt::impl::hash_base {};
    template<> struct hash<winrt::AdjustSdk::IAdjustEventClass> : winrt::impl::hash_base {};
    template<> struct hash<winrt::AdjustSdk::IAdjustEventFactory> : winrt::impl::hash_base {};
    template<> struct hash<winrt::AdjustSdk::IAdjustEventFailureClass> : winrt::impl::hash_base {};
    template<> struct hash<winrt::AdjustSdk::IAdjustEventSuccessClass> : winrt::impl::hash_base {};
    template<> struct hash<winrt::AdjustSdk::IAdjustSessionFailureClass> : winrt::impl::hash_base {};
    template<> struct hash<winrt::AdjustSdk::IAdjustSessionSuccessClass> : winrt::impl::hash_base {};
    template<> struct hash<winrt::AdjustSdk::IAdjustStatic> : winrt::impl::hash_base {};
    template<> struct hash<winrt::AdjustSdk::IExampleClass> : winrt::impl::hash_base {};
    template<> struct hash<winrt::AdjustSdk::IExampleStatic> : winrt::impl::hash_base {};
    template<> struct hash<winrt::AdjustSdk::Adjust> : winrt::impl::hash_base {};
    template<> struct hash<winrt::AdjustSdk::AdjustAttribution> : winrt::impl::hash_base {};
    template<> struct hash<winrt::AdjustSdk::AdjustConfig> : winrt::impl::hash_base {};
    template<> struct hash<winrt::AdjustSdk::AdjustEvent> : winrt::impl::hash_base {};
    template<> struct hash<winrt::AdjustSdk::AdjustEventFailure> : winrt::impl::hash_base {};
    template<> struct hash<winrt::AdjustSdk::AdjustEventSuccess> : winrt::impl::hash_base {};
    template<> struct hash<winrt::AdjustSdk::AdjustSessionFailure> : winrt::impl::hash_base {};
    template<> struct hash<winrt::AdjustSdk::AdjustSessionSuccess> : winrt::impl::hash_base {};
    template<> struct hash<winrt::AdjustSdk::Example> : winrt::impl::hash_base {};
#endif
#ifdef __cpp_lib_format
#endif
}
#endif
