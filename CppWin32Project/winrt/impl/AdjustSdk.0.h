// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.220110.5

#pragma once
#ifndef WINRT_AdjustSdk_0_H
#define WINRT_AdjustSdk_0_H
WINRT_EXPORT namespace winrt::Windows::Foundation
{
    template <typename T> struct __declspec(empty_bases) EventHandler;
    template <typename T> struct __declspec(empty_bases) IReference;
    struct Uri;
}
WINRT_EXPORT namespace winrt::Windows::Foundation::Collections
{
    template <typename K, typename V> struct __declspec(empty_bases) IMapView;
}
WINRT_EXPORT namespace winrt::AdjustSdk
{
    enum class ActivityKind : int32_t
    {
        Unknown = 0,
        Session = 1,
        Event = 2,
        Click = 3,
        Attribution = 4,
        Info = 5,
        Gdpr = 6,
    };
    enum class LogLevel : int32_t
    {
        Verbose = 1,
        Debug = 2,
        Info = 3,
        Warn = 4,
        Error = 5,
        Assert = 6,
        Suppress = 7,
    };
    struct IAdjustAttributionClass;
    struct IAdjustAttributionStatic;
    struct IAdjustClass;
    struct IAdjustConfigClass;
    struct IAdjustConfigFactory;
    struct IAdjustEventClass;
    struct IAdjustEventFactory;
    struct IAdjustEventFailureClass;
    struct IAdjustEventSuccessClass;
    struct IAdjustSessionFailureClass;
    struct IAdjustSessionSuccessClass;
    struct IAdjustStatic;
    struct IExampleClass;
    struct IExampleStatic;
    struct Adjust;
    struct AdjustAttribution;
    struct AdjustConfig;
    struct AdjustEvent;
    struct AdjustEventFailure;
    struct AdjustEventSuccess;
    struct AdjustSessionFailure;
    struct AdjustSessionSuccess;
    struct Example;
}
namespace winrt::impl
{
    template <> struct category<winrt::AdjustSdk::IAdjustAttributionClass>{ using type = interface_category; };
    template <> struct category<winrt::AdjustSdk::IAdjustAttributionStatic>{ using type = interface_category; };
    template <> struct category<winrt::AdjustSdk::IAdjustClass>{ using type = interface_category; };
    template <> struct category<winrt::AdjustSdk::IAdjustConfigClass>{ using type = interface_category; };
    template <> struct category<winrt::AdjustSdk::IAdjustConfigFactory>{ using type = interface_category; };
    template <> struct category<winrt::AdjustSdk::IAdjustEventClass>{ using type = interface_category; };
    template <> struct category<winrt::AdjustSdk::IAdjustEventFactory>{ using type = interface_category; };
    template <> struct category<winrt::AdjustSdk::IAdjustEventFailureClass>{ using type = interface_category; };
    template <> struct category<winrt::AdjustSdk::IAdjustEventSuccessClass>{ using type = interface_category; };
    template <> struct category<winrt::AdjustSdk::IAdjustSessionFailureClass>{ using type = interface_category; };
    template <> struct category<winrt::AdjustSdk::IAdjustSessionSuccessClass>{ using type = interface_category; };
    template <> struct category<winrt::AdjustSdk::IAdjustStatic>{ using type = interface_category; };
    template <> struct category<winrt::AdjustSdk::IExampleClass>{ using type = interface_category; };
    template <> struct category<winrt::AdjustSdk::IExampleStatic>{ using type = interface_category; };
    template <> struct category<winrt::AdjustSdk::Adjust>{ using type = class_category; };
    template <> struct category<winrt::AdjustSdk::AdjustAttribution>{ using type = class_category; };
    template <> struct category<winrt::AdjustSdk::AdjustConfig>{ using type = class_category; };
    template <> struct category<winrt::AdjustSdk::AdjustEvent>{ using type = class_category; };
    template <> struct category<winrt::AdjustSdk::AdjustEventFailure>{ using type = class_category; };
    template <> struct category<winrt::AdjustSdk::AdjustEventSuccess>{ using type = class_category; };
    template <> struct category<winrt::AdjustSdk::AdjustSessionFailure>{ using type = class_category; };
    template <> struct category<winrt::AdjustSdk::AdjustSessionSuccess>{ using type = class_category; };
    template <> struct category<winrt::AdjustSdk::Example>{ using type = class_category; };
    template <> struct category<winrt::AdjustSdk::ActivityKind>{ using type = enum_category; };
    template <> struct category<winrt::AdjustSdk::LogLevel>{ using type = enum_category; };
    template <> inline constexpr auto& name_v<winrt::AdjustSdk::Adjust> = L"AdjustSdk.Adjust";
    template <> inline constexpr auto& name_v<winrt::AdjustSdk::AdjustAttribution> = L"AdjustSdk.AdjustAttribution";
    template <> inline constexpr auto& name_v<winrt::AdjustSdk::AdjustConfig> = L"AdjustSdk.AdjustConfig";
    template <> inline constexpr auto& name_v<winrt::AdjustSdk::AdjustEvent> = L"AdjustSdk.AdjustEvent";
    template <> inline constexpr auto& name_v<winrt::AdjustSdk::AdjustEventFailure> = L"AdjustSdk.AdjustEventFailure";
    template <> inline constexpr auto& name_v<winrt::AdjustSdk::AdjustEventSuccess> = L"AdjustSdk.AdjustEventSuccess";
    template <> inline constexpr auto& name_v<winrt::AdjustSdk::AdjustSessionFailure> = L"AdjustSdk.AdjustSessionFailure";
    template <> inline constexpr auto& name_v<winrt::AdjustSdk::AdjustSessionSuccess> = L"AdjustSdk.AdjustSessionSuccess";
    template <> inline constexpr auto& name_v<winrt::AdjustSdk::Example> = L"AdjustSdk.Example";
    template <> inline constexpr auto& name_v<winrt::AdjustSdk::ActivityKind> = L"AdjustSdk.ActivityKind";
    template <> inline constexpr auto& name_v<winrt::AdjustSdk::LogLevel> = L"AdjustSdk.LogLevel";
    template <> inline constexpr auto& name_v<winrt::AdjustSdk::IAdjustAttributionClass> = L"AdjustSdk.IAdjustAttributionClass";
    template <> inline constexpr auto& name_v<winrt::AdjustSdk::IAdjustAttributionStatic> = L"AdjustSdk.IAdjustAttributionStatic";
    template <> inline constexpr auto& name_v<winrt::AdjustSdk::IAdjustClass> = L"AdjustSdk.IAdjustClass";
    template <> inline constexpr auto& name_v<winrt::AdjustSdk::IAdjustConfigClass> = L"AdjustSdk.IAdjustConfigClass";
    template <> inline constexpr auto& name_v<winrt::AdjustSdk::IAdjustConfigFactory> = L"AdjustSdk.IAdjustConfigFactory";
    template <> inline constexpr auto& name_v<winrt::AdjustSdk::IAdjustEventClass> = L"AdjustSdk.IAdjustEventClass";
    template <> inline constexpr auto& name_v<winrt::AdjustSdk::IAdjustEventFactory> = L"AdjustSdk.IAdjustEventFactory";
    template <> inline constexpr auto& name_v<winrt::AdjustSdk::IAdjustEventFailureClass> = L"AdjustSdk.IAdjustEventFailureClass";
    template <> inline constexpr auto& name_v<winrt::AdjustSdk::IAdjustEventSuccessClass> = L"AdjustSdk.IAdjustEventSuccessClass";
    template <> inline constexpr auto& name_v<winrt::AdjustSdk::IAdjustSessionFailureClass> = L"AdjustSdk.IAdjustSessionFailureClass";
    template <> inline constexpr auto& name_v<winrt::AdjustSdk::IAdjustSessionSuccessClass> = L"AdjustSdk.IAdjustSessionSuccessClass";
    template <> inline constexpr auto& name_v<winrt::AdjustSdk::IAdjustStatic> = L"AdjustSdk.IAdjustStatic";
    template <> inline constexpr auto& name_v<winrt::AdjustSdk::IExampleClass> = L"AdjustSdk.IExampleClass";
    template <> inline constexpr auto& name_v<winrt::AdjustSdk::IExampleStatic> = L"AdjustSdk.IExampleStatic";
    template <> inline constexpr guid guid_v<winrt::AdjustSdk::IAdjustAttributionClass>{ 0xB866A878,0xAEB4,0x5E60,{ 0xB5,0x0E,0xB1,0xC5,0xA0,0x48,0x49,0xEE } }; // B866A878-AEB4-5E60-B50E-B1C5A04849EE
    template <> inline constexpr guid guid_v<winrt::AdjustSdk::IAdjustAttributionStatic>{ 0xC5C6B0A6,0xC4F2,0x58C6,{ 0x87,0x1E,0xEF,0x09,0xD6,0xA8,0xD6,0x46 } }; // C5C6B0A6-C4F2-58C6-871E-EF09D6A8D646
    template <> inline constexpr guid guid_v<winrt::AdjustSdk::IAdjustClass>{ 0x8F0F0B5A,0x1E8D,0x570D,{ 0xAC,0x7F,0x7A,0x8C,0xA3,0x4C,0x2C,0x45 } }; // 8F0F0B5A-1E8D-570D-AC7F-7A8CA34C2C45
    template <> inline constexpr guid guid_v<winrt::AdjustSdk::IAdjustConfigClass>{ 0xA80C342C,0xE22B,0x5EBF,{ 0x84,0x31,0x41,0x7C,0x6E,0x99,0x4A,0xE8 } }; // A80C342C-E22B-5EBF-8431-417C6E994AE8
    template <> inline constexpr guid guid_v<winrt::AdjustSdk::IAdjustConfigFactory>{ 0xFACB529F,0x7988,0x5464,{ 0xBB,0x73,0x53,0xEC,0x63,0x6F,0xB3,0x4C } }; // FACB529F-7988-5464-BB73-53EC636FB34C
    template <> inline constexpr guid guid_v<winrt::AdjustSdk::IAdjustEventClass>{ 0x9C4603C5,0xBD0B,0x578B,{ 0x9A,0x8C,0x99,0x2D,0x69,0x6D,0x3C,0x41 } }; // 9C4603C5-BD0B-578B-9A8C-992D696D3C41
    template <> inline constexpr guid guid_v<winrt::AdjustSdk::IAdjustEventFactory>{ 0x8FC6145A,0xEE34,0x5EAC,{ 0x85,0x15,0xA5,0xC7,0x87,0x70,0x5F,0x0D } }; // 8FC6145A-EE34-5EAC-8515-A5C787705F0D
    template <> inline constexpr guid guid_v<winrt::AdjustSdk::IAdjustEventFailureClass>{ 0xB2EA2F78,0xFE0C,0x5F46,{ 0xBA,0xBC,0xE3,0xF2,0x20,0xFB,0x56,0xB8 } }; // B2EA2F78-FE0C-5F46-BABC-E3F220FB56B8
    template <> inline constexpr guid guid_v<winrt::AdjustSdk::IAdjustEventSuccessClass>{ 0xFBED1917,0x5A41,0x554B,{ 0xB0,0xF7,0x05,0xAB,0x4D,0x91,0x1B,0xEC } }; // FBED1917-5A41-554B-B0F7-05AB4D911BEC
    template <> inline constexpr guid guid_v<winrt::AdjustSdk::IAdjustSessionFailureClass>{ 0xA6788AD3,0x13CB,0x5B40,{ 0xAE,0x9E,0x34,0xE3,0x31,0xA1,0xF0,0xE1 } }; // A6788AD3-13CB-5B40-AE9E-34E331A1F0E1
    template <> inline constexpr guid guid_v<winrt::AdjustSdk::IAdjustSessionSuccessClass>{ 0xCCA4931A,0x4B55,0x5352,{ 0xA2,0x22,0x50,0x20,0x86,0x4D,0x79,0x85 } }; // CCA4931A-4B55-5352-A222-5020864D7985
    template <> inline constexpr guid guid_v<winrt::AdjustSdk::IAdjustStatic>{ 0x47DB96CB,0x4B88,0x5F19,{ 0x9E,0xD5,0xFB,0x65,0x6D,0x23,0x61,0x39 } }; // 47DB96CB-4B88-5F19-9ED5-FB656D236139
    template <> inline constexpr guid guid_v<winrt::AdjustSdk::IExampleClass>{ 0xD7301587,0x9790,0x5A09,{ 0xBB,0xEF,0xB4,0x23,0x08,0x8D,0x08,0xC8 } }; // D7301587-9790-5A09-BBEF-B423088D08C8
    template <> inline constexpr guid guid_v<winrt::AdjustSdk::IExampleStatic>{ 0x36708AAB,0x83A4,0x5EAA,{ 0x97,0x11,0xC7,0x7E,0x8C,0x55,0xA3,0xF1 } }; // 36708AAB-83A4-5EAA-9711-C77E8C55A3F1
    template <> struct default_interface<winrt::AdjustSdk::Adjust>{ using type = winrt::AdjustSdk::IAdjustClass; };
    template <> struct default_interface<winrt::AdjustSdk::AdjustAttribution>{ using type = winrt::AdjustSdk::IAdjustAttributionClass; };
    template <> struct default_interface<winrt::AdjustSdk::AdjustConfig>{ using type = winrt::AdjustSdk::IAdjustConfigClass; };
    template <> struct default_interface<winrt::AdjustSdk::AdjustEvent>{ using type = winrt::AdjustSdk::IAdjustEventClass; };
    template <> struct default_interface<winrt::AdjustSdk::AdjustEventFailure>{ using type = winrt::AdjustSdk::IAdjustEventFailureClass; };
    template <> struct default_interface<winrt::AdjustSdk::AdjustEventSuccess>{ using type = winrt::AdjustSdk::IAdjustEventSuccessClass; };
    template <> struct default_interface<winrt::AdjustSdk::AdjustSessionFailure>{ using type = winrt::AdjustSdk::IAdjustSessionFailureClass; };
    template <> struct default_interface<winrt::AdjustSdk::AdjustSessionSuccess>{ using type = winrt::AdjustSdk::IAdjustSessionSuccessClass; };
    template <> struct default_interface<winrt::AdjustSdk::Example>{ using type = winrt::AdjustSdk::IExampleClass; };
    template <> struct abi<winrt::AdjustSdk::IAdjustAttributionClass>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall put_TrackerToken(void*) noexcept = 0;
            virtual int32_t __stdcall get_TrackerToken(void**) noexcept = 0;
            virtual int32_t __stdcall put_TrackerName(void*) noexcept = 0;
            virtual int32_t __stdcall get_TrackerName(void**) noexcept = 0;
            virtual int32_t __stdcall put_Network(void*) noexcept = 0;
            virtual int32_t __stdcall get_Network(void**) noexcept = 0;
            virtual int32_t __stdcall put_Campaign(void*) noexcept = 0;
            virtual int32_t __stdcall get_Campaign(void**) noexcept = 0;
            virtual int32_t __stdcall put_Adgroup(void*) noexcept = 0;
            virtual int32_t __stdcall get_Adgroup(void**) noexcept = 0;
            virtual int32_t __stdcall put_Creative(void*) noexcept = 0;
            virtual int32_t __stdcall get_Creative(void**) noexcept = 0;
            virtual int32_t __stdcall put_ClickLabel(void*) noexcept = 0;
            virtual int32_t __stdcall get_ClickLabel(void**) noexcept = 0;
            virtual int32_t __stdcall put_Adid(void*) noexcept = 0;
            virtual int32_t __stdcall get_Adid(void**) noexcept = 0;
            virtual int32_t __stdcall Equals(void*, bool*) noexcept = 0;
            virtual int32_t __stdcall GetHashCode(int32_t*) noexcept = 0;
            virtual int32_t __stdcall ToString(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::AdjustSdk::IAdjustAttributionStatic>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall FromJsonString(void*, void*, void**) noexcept = 0;
            virtual int32_t __stdcall ToDictionary(void*, void**) noexcept = 0;
            virtual int32_t __stdcall FromDictionary(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::AdjustSdk::IAdjustClass>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::AdjustSdk::IAdjustConfigClass>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall put_SdkPrefix(void*) noexcept = 0;
            virtual int32_t __stdcall get_SdkPrefix(void**) noexcept = 0;
            virtual int32_t __stdcall put_EventBufferingEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall get_EventBufferingEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_DefaultTracker(void*) noexcept = 0;
            virtual int32_t __stdcall get_DefaultTracker(void**) noexcept = 0;
            virtual int32_t __stdcall put_SendInBackground(bool) noexcept = 0;
            virtual int32_t __stdcall get_SendInBackground(bool*) noexcept = 0;
            virtual int32_t __stdcall put_DelayStart(void*) noexcept = 0;
            virtual int32_t __stdcall get_DelayStart(void**) noexcept = 0;
            virtual int32_t __stdcall put_AttributionChanged(void*) noexcept = 0;
            virtual int32_t __stdcall get_AttributionChanged(void**) noexcept = 0;
            virtual int32_t __stdcall put_LogHandler(void*) noexcept = 0;
            virtual int32_t __stdcall get_LogHandler(void**) noexcept = 0;
            virtual int32_t __stdcall SetUserAgent(void*) noexcept = 0;
            virtual int32_t __stdcall SetDeviceKnown(bool) noexcept = 0;
            virtual int32_t __stdcall IsValid(bool*) noexcept = 0;
            virtual int32_t __stdcall SetAppSecret(int64_t, int64_t, int64_t, int64_t, int64_t) noexcept = 0;
        };
    };
    template <> struct abi<winrt::AdjustSdk::IAdjustConfigFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateAdjustConfig(void*, void*, void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::AdjustSdk::IAdjustEventClass>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall put_PurchaseId(void*) noexcept = 0;
            virtual int32_t __stdcall get_PurchaseId(void**) noexcept = 0;
            virtual int32_t __stdcall put_CallbackId(void*) noexcept = 0;
            virtual int32_t __stdcall get_CallbackId(void**) noexcept = 0;
            virtual int32_t __stdcall SetRevenue(double, void*) noexcept = 0;
            virtual int32_t __stdcall AddCallbackParameter(void*, void*) noexcept = 0;
            virtual int32_t __stdcall AddPartnerParameter(void*, void*) noexcept = 0;
            virtual int32_t __stdcall IsValid(bool*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::AdjustSdk::IAdjustEventFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateAdjustEvent(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::AdjustSdk::IAdjustEventFailureClass>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall put_Message(void*) noexcept = 0;
            virtual int32_t __stdcall get_Message(void**) noexcept = 0;
            virtual int32_t __stdcall put_Timestamp(void*) noexcept = 0;
            virtual int32_t __stdcall get_Timestamp(void**) noexcept = 0;
            virtual int32_t __stdcall put_Adid(void*) noexcept = 0;
            virtual int32_t __stdcall get_Adid(void**) noexcept = 0;
            virtual int32_t __stdcall put_EventToken(void*) noexcept = 0;
            virtual int32_t __stdcall get_EventToken(void**) noexcept = 0;
            virtual int32_t __stdcall put_WillRetry(bool) noexcept = 0;
            virtual int32_t __stdcall get_WillRetry(bool*) noexcept = 0;
            virtual int32_t __stdcall put_CallbackId(void*) noexcept = 0;
            virtual int32_t __stdcall get_CallbackId(void**) noexcept = 0;
            virtual int32_t __stdcall put_JsonResponse(void*) noexcept = 0;
            virtual int32_t __stdcall get_JsonResponse(void**) noexcept = 0;
            virtual int32_t __stdcall ToString(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::AdjustSdk::IAdjustEventSuccessClass>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall put_Message(void*) noexcept = 0;
            virtual int32_t __stdcall get_Message(void**) noexcept = 0;
            virtual int32_t __stdcall put_Timestamp(void*) noexcept = 0;
            virtual int32_t __stdcall get_Timestamp(void**) noexcept = 0;
            virtual int32_t __stdcall put_Adid(void*) noexcept = 0;
            virtual int32_t __stdcall get_Adid(void**) noexcept = 0;
            virtual int32_t __stdcall put_EventToken(void*) noexcept = 0;
            virtual int32_t __stdcall get_EventToken(void**) noexcept = 0;
            virtual int32_t __stdcall put_CallbackId(void*) noexcept = 0;
            virtual int32_t __stdcall get_CallbackId(void**) noexcept = 0;
            virtual int32_t __stdcall put_JsonResponse(void*) noexcept = 0;
            virtual int32_t __stdcall get_JsonResponse(void**) noexcept = 0;
            virtual int32_t __stdcall ToString(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::AdjustSdk::IAdjustSessionFailureClass>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall put_Message(void*) noexcept = 0;
            virtual int32_t __stdcall get_Message(void**) noexcept = 0;
            virtual int32_t __stdcall put_Timestamp(void*) noexcept = 0;
            virtual int32_t __stdcall get_Timestamp(void**) noexcept = 0;
            virtual int32_t __stdcall put_Adid(void*) noexcept = 0;
            virtual int32_t __stdcall get_Adid(void**) noexcept = 0;
            virtual int32_t __stdcall put_WillRetry(bool) noexcept = 0;
            virtual int32_t __stdcall get_WillRetry(bool*) noexcept = 0;
            virtual int32_t __stdcall put_JsonResponse(void*) noexcept = 0;
            virtual int32_t __stdcall get_JsonResponse(void**) noexcept = 0;
            virtual int32_t __stdcall ToString(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::AdjustSdk::IAdjustSessionSuccessClass>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall put_Message(void*) noexcept = 0;
            virtual int32_t __stdcall get_Message(void**) noexcept = 0;
            virtual int32_t __stdcall put_Timestamp(void*) noexcept = 0;
            virtual int32_t __stdcall get_Timestamp(void**) noexcept = 0;
            virtual int32_t __stdcall put_Adid(void*) noexcept = 0;
            virtual int32_t __stdcall get_Adid(void**) noexcept = 0;
            virtual int32_t __stdcall put_JsonResponse(void*) noexcept = 0;
            virtual int32_t __stdcall get_JsonResponse(void**) noexcept = 0;
            virtual int32_t __stdcall ToString(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::AdjustSdk::IAdjustStatic>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ApplicationLaunched(bool*) noexcept = 0;
            virtual int32_t __stdcall ApplicationLaunching(void*) noexcept = 0;
            virtual int32_t __stdcall ApplicationActivated() noexcept = 0;
            virtual int32_t __stdcall ApplicationDeactivated() noexcept = 0;
            virtual int32_t __stdcall TrackEvent(void*) noexcept = 0;
            virtual int32_t __stdcall SetEnabled(bool) noexcept = 0;
            virtual int32_t __stdcall IsEnabled(bool*) noexcept = 0;
            virtual int32_t __stdcall SetOfflineMode(bool) noexcept = 0;
            virtual int32_t __stdcall AppWillOpenUrl(void*) noexcept = 0;
            virtual int32_t __stdcall GetWindowsAdId(void**) noexcept = 0;
            virtual int32_t __stdcall AddSessionCallbackParameter(void*, void*) noexcept = 0;
            virtual int32_t __stdcall AddSessionPartnerParameter(void*, void*) noexcept = 0;
            virtual int32_t __stdcall RemoveSessionCallbackParameter(void*) noexcept = 0;
            virtual int32_t __stdcall RemoveSessionPartnerParameter(void*) noexcept = 0;
            virtual int32_t __stdcall ResetSessionCallbackParameters() noexcept = 0;
            virtual int32_t __stdcall ResetSessionPartnerParameters() noexcept = 0;
            virtual int32_t __stdcall SendFirstPackages() noexcept = 0;
            virtual int32_t __stdcall SetPushToken(void*) noexcept = 0;
            virtual int32_t __stdcall GetAdid(void**) noexcept = 0;
            virtual int32_t __stdcall GetAttributon(void**) noexcept = 0;
            virtual int32_t __stdcall GdprForgetMe() noexcept = 0;
            virtual int32_t __stdcall GetSdkVersion(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::AdjustSdk::IExampleClass>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall put_SampleProperty(int32_t) noexcept = 0;
            virtual int32_t __stdcall get_SampleProperty(int32_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::AdjustSdk::IExampleStatic>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall SayHello(void**) noexcept = 0;
        };
    };
    template <typename D>
    struct consume_AdjustSdk_IAdjustAttributionClass
    {
        WINRT_IMPL_AUTO(void) TrackerToken(param::hstring const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) TrackerToken() const;
        WINRT_IMPL_AUTO(void) TrackerName(param::hstring const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) TrackerName() const;
        WINRT_IMPL_AUTO(void) Network(param::hstring const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) Network() const;
        WINRT_IMPL_AUTO(void) Campaign(param::hstring const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) Campaign() const;
        WINRT_IMPL_AUTO(void) Adgroup(param::hstring const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) Adgroup() const;
        WINRT_IMPL_AUTO(void) Creative(param::hstring const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) Creative() const;
        WINRT_IMPL_AUTO(void) ClickLabel(param::hstring const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) ClickLabel() const;
        WINRT_IMPL_AUTO(void) Adid(param::hstring const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) Adid() const;
        WINRT_IMPL_AUTO(bool) Equals(winrt::Windows::Foundation::IInspectable const& obj) const;
        WINRT_IMPL_AUTO(int32_t) GetHashCode() const;
        WINRT_IMPL_AUTO(hstring) ToString() const;
    };
    template <> struct consume<winrt::AdjustSdk::IAdjustAttributionClass>
    {
        template <typename D> using type = consume_AdjustSdk_IAdjustAttributionClass<D>;
    };
    template <typename D>
    struct consume_AdjustSdk_IAdjustAttributionStatic
    {
        WINRT_IMPL_AUTO(winrt::AdjustSdk::AdjustAttribution) FromJsonString(param::hstring const& attributionString, param::hstring const& adid) const;
        WINRT_IMPL_AUTO(winrt::Windows::Foundation::Collections::IMapView<hstring, winrt::Windows::Foundation::IInspectable>) ToDictionary(winrt::AdjustSdk::AdjustAttribution const& attribution) const;
        WINRT_IMPL_AUTO(winrt::AdjustSdk::AdjustAttribution) FromDictionary(param::map_view<hstring, winrt::Windows::Foundation::IInspectable> const& attributionObjectMap) const;
    };
    template <> struct consume<winrt::AdjustSdk::IAdjustAttributionStatic>
    {
        template <typename D> using type = consume_AdjustSdk_IAdjustAttributionStatic<D>;
    };
    template <typename D>
    struct consume_AdjustSdk_IAdjustClass
    {
    };
    template <> struct consume<winrt::AdjustSdk::IAdjustClass>
    {
        template <typename D> using type = consume_AdjustSdk_IAdjustClass<D>;
    };
    template <typename D>
    struct consume_AdjustSdk_IAdjustConfigClass
    {
        WINRT_IMPL_AUTO(void) SdkPrefix(param::hstring const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) SdkPrefix() const;
        WINRT_IMPL_AUTO(void) EventBufferingEnabled(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) EventBufferingEnabled() const;
        WINRT_IMPL_AUTO(void) DefaultTracker(param::hstring const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) DefaultTracker() const;
        WINRT_IMPL_AUTO(void) SendInBackground(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) SendInBackground() const;
        WINRT_IMPL_AUTO(void) DelayStart(winrt::Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan> const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::IReference<winrt::Windows::Foundation::TimeSpan>) DelayStart() const;
        WINRT_IMPL_AUTO(void) AttributionChanged(winrt::Windows::Foundation::EventHandler<winrt::AdjustSdk::AdjustAttribution> const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::EventHandler<winrt::AdjustSdk::AdjustAttribution>) AttributionChanged() const;
        WINRT_IMPL_AUTO(void) LogHandler(winrt::Windows::Foundation::EventHandler<hstring> const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::EventHandler<hstring>) LogHandler() const;
        WINRT_IMPL_AUTO(void) SetUserAgent(param::hstring const& userAgent) const;
        WINRT_IMPL_AUTO(void) SetDeviceKnown(bool deviceKnown) const;
        WINRT_IMPL_AUTO(bool) IsValid() const;
        WINRT_IMPL_AUTO(void) SetAppSecret(int64_t secretId, int64_t info1, int64_t info2, int64_t info3, int64_t info4) const;
    };
    template <> struct consume<winrt::AdjustSdk::IAdjustConfigClass>
    {
        template <typename D> using type = consume_AdjustSdk_IAdjustConfigClass<D>;
    };
    template <typename D>
    struct consume_AdjustSdk_IAdjustConfigFactory
    {
        WINRT_IMPL_AUTO(winrt::AdjustSdk::AdjustConfig) CreateAdjustConfig(param::hstring const& appToken, param::hstring const& environment, winrt::Windows::Foundation::IReference<winrt::AdjustSdk::LogLevel> const& logLevel) const;
    };
    template <> struct consume<winrt::AdjustSdk::IAdjustConfigFactory>
    {
        template <typename D> using type = consume_AdjustSdk_IAdjustConfigFactory<D>;
    };
    template <typename D>
    struct consume_AdjustSdk_IAdjustEventClass
    {
        WINRT_IMPL_AUTO(void) PurchaseId(param::hstring const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) PurchaseId() const;
        WINRT_IMPL_AUTO(void) CallbackId(param::hstring const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) CallbackId() const;
        WINRT_IMPL_AUTO(void) SetRevenue(double revenue, param::hstring const& currency) const;
        WINRT_IMPL_AUTO(void) AddCallbackParameter(param::hstring const& key, param::hstring const& value) const;
        WINRT_IMPL_AUTO(void) AddPartnerParameter(param::hstring const& key, param::hstring const& value) const;
        WINRT_IMPL_AUTO(bool) IsValid() const;
    };
    template <> struct consume<winrt::AdjustSdk::IAdjustEventClass>
    {
        template <typename D> using type = consume_AdjustSdk_IAdjustEventClass<D>;
    };
    template <typename D>
    struct consume_AdjustSdk_IAdjustEventFactory
    {
        WINRT_IMPL_AUTO(winrt::AdjustSdk::AdjustEvent) CreateAdjustEvent(param::hstring const& eventToken) const;
    };
    template <> struct consume<winrt::AdjustSdk::IAdjustEventFactory>
    {
        template <typename D> using type = consume_AdjustSdk_IAdjustEventFactory<D>;
    };
    template <typename D>
    struct consume_AdjustSdk_IAdjustEventFailureClass
    {
        WINRT_IMPL_AUTO(void) Message(param::hstring const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) Message() const;
        WINRT_IMPL_AUTO(void) Timestamp(param::hstring const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) Timestamp() const;
        WINRT_IMPL_AUTO(void) Adid(param::hstring const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) Adid() const;
        WINRT_IMPL_AUTO(void) EventToken(param::hstring const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) EventToken() const;
        WINRT_IMPL_AUTO(void) WillRetry(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) WillRetry() const;
        WINRT_IMPL_AUTO(void) CallbackId(param::hstring const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) CallbackId() const;
        WINRT_IMPL_AUTO(void) JsonResponse(param::async_map_view<hstring, hstring> const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Collections::IMapView<hstring, hstring>) JsonResponse() const;
        WINRT_IMPL_AUTO(hstring) ToString() const;
    };
    template <> struct consume<winrt::AdjustSdk::IAdjustEventFailureClass>
    {
        template <typename D> using type = consume_AdjustSdk_IAdjustEventFailureClass<D>;
    };
    template <typename D>
    struct consume_AdjustSdk_IAdjustEventSuccessClass
    {
        WINRT_IMPL_AUTO(void) Message(param::hstring const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) Message() const;
        WINRT_IMPL_AUTO(void) Timestamp(param::hstring const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) Timestamp() const;
        WINRT_IMPL_AUTO(void) Adid(param::hstring const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) Adid() const;
        WINRT_IMPL_AUTO(void) EventToken(param::hstring const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) EventToken() const;
        WINRT_IMPL_AUTO(void) CallbackId(param::hstring const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) CallbackId() const;
        WINRT_IMPL_AUTO(void) JsonResponse(param::async_map_view<hstring, hstring> const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Collections::IMapView<hstring, hstring>) JsonResponse() const;
        WINRT_IMPL_AUTO(hstring) ToString() const;
    };
    template <> struct consume<winrt::AdjustSdk::IAdjustEventSuccessClass>
    {
        template <typename D> using type = consume_AdjustSdk_IAdjustEventSuccessClass<D>;
    };
    template <typename D>
    struct consume_AdjustSdk_IAdjustSessionFailureClass
    {
        WINRT_IMPL_AUTO(void) Message(param::hstring const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) Message() const;
        WINRT_IMPL_AUTO(void) Timestamp(param::hstring const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) Timestamp() const;
        WINRT_IMPL_AUTO(void) Adid(param::hstring const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) Adid() const;
        WINRT_IMPL_AUTO(void) WillRetry(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) WillRetry() const;
        WINRT_IMPL_AUTO(void) JsonResponse(param::async_map_view<hstring, hstring> const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Collections::IMapView<hstring, hstring>) JsonResponse() const;
        WINRT_IMPL_AUTO(hstring) ToString() const;
    };
    template <> struct consume<winrt::AdjustSdk::IAdjustSessionFailureClass>
    {
        template <typename D> using type = consume_AdjustSdk_IAdjustSessionFailureClass<D>;
    };
    template <typename D>
    struct consume_AdjustSdk_IAdjustSessionSuccessClass
    {
        WINRT_IMPL_AUTO(void) Message(param::hstring const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) Message() const;
        WINRT_IMPL_AUTO(void) Timestamp(param::hstring const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) Timestamp() const;
        WINRT_IMPL_AUTO(void) Adid(param::hstring const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) Adid() const;
        WINRT_IMPL_AUTO(void) JsonResponse(param::async_map_view<hstring, hstring> const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Collections::IMapView<hstring, hstring>) JsonResponse() const;
        WINRT_IMPL_AUTO(hstring) ToString() const;
    };
    template <> struct consume<winrt::AdjustSdk::IAdjustSessionSuccessClass>
    {
        template <typename D> using type = consume_AdjustSdk_IAdjustSessionSuccessClass<D>;
    };
    template <typename D>
    struct consume_AdjustSdk_IAdjustStatic
    {
        [[nodiscard]] WINRT_IMPL_AUTO(bool) ApplicationLaunched() const;
        WINRT_IMPL_AUTO(void) ApplicationLaunching(winrt::AdjustSdk::AdjustConfig const& adjustConfig) const;
        WINRT_IMPL_AUTO(void) ApplicationActivated() const;
        WINRT_IMPL_AUTO(void) ApplicationDeactivated() const;
        WINRT_IMPL_AUTO(void) TrackEvent(winrt::AdjustSdk::AdjustEvent const& adjustEvent) const;
        WINRT_IMPL_AUTO(void) SetEnabled(bool enabled) const;
        WINRT_IMPL_AUTO(bool) IsEnabled() const;
        WINRT_IMPL_AUTO(void) SetOfflineMode(bool offlineMode) const;
        WINRT_IMPL_AUTO(void) AppWillOpenUrl(winrt::Windows::Foundation::Uri const& url) const;
        WINRT_IMPL_AUTO(hstring) GetWindowsAdId() const;
        WINRT_IMPL_AUTO(void) AddSessionCallbackParameter(param::hstring const& key, param::hstring const& value) const;
        WINRT_IMPL_AUTO(void) AddSessionPartnerParameter(param::hstring const& key, param::hstring const& value) const;
        WINRT_IMPL_AUTO(void) RemoveSessionCallbackParameter(param::hstring const& key) const;
        WINRT_IMPL_AUTO(void) RemoveSessionPartnerParameter(param::hstring const& key) const;
        WINRT_IMPL_AUTO(void) ResetSessionCallbackParameters() const;
        WINRT_IMPL_AUTO(void) ResetSessionPartnerParameters() const;
        WINRT_IMPL_AUTO(void) SendFirstPackages() const;
        WINRT_IMPL_AUTO(void) SetPushToken(param::hstring const& pushToken) const;
        WINRT_IMPL_AUTO(hstring) GetAdid() const;
        WINRT_IMPL_AUTO(winrt::AdjustSdk::AdjustAttribution) GetAttributon() const;
        WINRT_IMPL_AUTO(void) GdprForgetMe() const;
        WINRT_IMPL_AUTO(hstring) GetSdkVersion() const;
    };
    template <> struct consume<winrt::AdjustSdk::IAdjustStatic>
    {
        template <typename D> using type = consume_AdjustSdk_IAdjustStatic<D>;
    };
    template <typename D>
    struct consume_AdjustSdk_IExampleClass
    {
        WINRT_IMPL_AUTO(void) SampleProperty(int32_t value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(int32_t) SampleProperty() const;
    };
    template <> struct consume<winrt::AdjustSdk::IExampleClass>
    {
        template <typename D> using type = consume_AdjustSdk_IExampleClass<D>;
    };
    template <typename D>
    struct consume_AdjustSdk_IExampleStatic
    {
        WINRT_IMPL_AUTO(hstring) SayHello() const;
    };
    template <> struct consume<winrt::AdjustSdk::IExampleStatic>
    {
        template <typename D> using type = consume_AdjustSdk_IExampleStatic<D>;
    };
}
#endif
